#/usr/bin/env bash

#Definition of the options
#: means an option is required
TEMP=`getopt -o AGNpis:kr:v:S:h --long AT,GC,dupliPos,dupliID,subsetSNP:,keepIntermediate,randomIndividuals:,splitIndiv:,randomSNP:,help -n 'qualityControl.sh' -- "$@"`
eval set -- "$TEMP"

#Initialise the flags that will be modified by the different options.
argAT=0
argGC=0
argN=0
argPos=0
argID=0
argSNP=""
argKeep=0
argRandom=""
argRandomSNP=""
argSplitIndiv=""

usage() {
	clear
	#originalSize=$(stty size | cut -d " " -f 2)
	#stty cols 50
	echo -e "#######################################################################\n"
	echo -e "qualityControl.sh is a shell script taking as input a fileset of genomic data, namely SNP genotypes in the standard Plink format (BED/BIM/FAM). Adding different options allow subsetting of your initial dataset, however relying on the Plink software for most of the operations. Operations can be inputted simultaneously.\n"
	echo -e "\e[1m./qualityControl.sh [OPTION(S)] [INPUT FILE]\e[0m\n"
	echo -e "\t\e[1m-A/--AT\e[0m\t\t\t\t\tRemoves any SNP for which the alleles are A/T or T/A.\n\t\t\t\t\t\tThese alleles are troublesome because there may be ambiguities in the strands.\n"
	echo -e "\t\e[1m-G/--GC\e[0m\t\t\t\t\tRemoves any SNP for which the alleles are G/C or C/G for the same reasons as above.\n"
	echo -e "\t\e[1m-N\e[0m\t\t\t\t\tRemoves any SNP for which one of the two alleles is N.\n\t\t\t\t\t\tThe joker nucleotide 'N' can be found when quality of typing is low and most of the alleles\n\t\t\t\t\t\tin individuals were not clearly defined.\n"
	echo -e "\t\e[1m-p/--dupliPos\e[0m\t\t\t\tRemoves every SNP sharing the same position.\n\t\t\t\t\t\t\e[31m/!\ \e[0m Do not add this option if you allow multiallelic SNP.\n"
	echo -e "\t\e[1m-i/--dupliID\e[0m\t\t\t\tRemoves every SNP sharing their rsID with one or more SNP.\n"
	echo -e "\t\e[1m-s/--subsetSNP [.bim FILE]\e[0m\t\tSubset the SNP of your fileset by the list of SNP of another fileset.\n"
	echo -e "\t\e[1m-r/--randomIndividuals [INTEGER]\e[0m\tRandomly pick a defined number of individuals and generates the corresponding subset.\n"
	echo -e "\t\e[1m-v/--splitIndividuals\e[0m\t\t\tRandomly picks a defined number of individuals and generates the corresponding dataset.\n\t\t\t\t\t\tAdditionally provides a dataset with the remaining individuals of the original dataset.\n"
	echo -e "\t\e[1m-S/--randomSNP\e[0m\t\t\t\tRandomly picks a defined number of SNP.\n"
	echo -e "\t\e[1m-k/--keepIntermediate\e[0m\t\t\tSince operations can be simultaneous (but are always executed in the same order),\n\t\t\t\t\t\tyou can choose to keep the datasets at each step.\n\t\t\t\t\t\t\e[31m/!\ \e[0m This can flood your folders with numerous and potentially heavy files.\n"
	echo -e "\n#######################################################################"

	#stty cols $originalSize
	exit 1
}

#According to the inputted options, flags are set to 1 (or the value of the option) to apply only the wanted transformations of data
while true ;
do
	case "$1" in
		-A|AT)
			argAT=1 ; shift ;;
		-G|GC)
			argGC=1 ; shift ;;
		-N)
			argN=1 ; shift ;;
		-p|dupliPos)
			argPos=1 ; shift ;;
		-i|dupliID)
			argID=1 ; shift ;;
		-s|subsetSNP)
			case "$2" in
				"")
					shift 2 ;;
				*)
					if [ -e $2 ]; then
						argSNP=$2
					else
						echo "The BIM file you are trying to use to subset your dataset does not exist !";
						exit 1;
					fi;
					shift 2 ;;
			esac ;;
		-r|randomIndividuals)
			case "$2" in
				"")
				shift 2 ;;
				*)
				re='^[0-9]+$'
				if ! [[ $2 =~ $re ]] ; then
					echo "error: $2 is not a number" >&2; exit 1
				fi;
				argRandom=$2
				shift 2;;
			esac ;;
		-v|splitIndiv)
			case "$2" in
				"")
				shift 2 ;;
				*)
				re='^[0-9]+$'
				if ! [[ $2 =~ $re ]] ; then
					echo "error: $2 is not a number" >&2; exit 1
				fi;
				argSplitIndiv=$2
				shift 2 ;;
			esac ;;
		-S|randomSNP)
			case "$2" in
				"")
				shift 2 ;;
				*)
				re='^[0-9]+$'
				if ! [[ $2 =~ $re ]] || [[ $(($2)) -eq 0 ]] ; then
					echo "error: $2 is not a valid number to input." >&2; exit 1
				fi;
				argRandomSNP=$2
				shift 2 ;;
			esac ;;
		-k|keepIntermediate)
			argKeep=1; shift ;;
    -h|help)
      usage; shift ;;
		--) shift ; break ;;
		*) echo "The option $1 does not exist." ; exit 1 ;;
	esac
done
